using BeetCode.Framework;
using System.Collections.Generic;
using System.Runtime.CompilerServices;

namespace BeetCode.Problems
{
    public class Problem389 : Problem
    {
        public override int Number => 389;
        public override string Title => "Find the Difference";
        public override string Difficulty => "Easy";
        public override string Description => 
            "You are given two strings s and t.\n\n" +
            "String t is generated by random shuffling string s and then add one more letter at a random position.\n\n" +
            "Return the letter that was added in t.\n\n" +
            "Example 1:\n" +
            "Input: s = \"abcd\", t = \"abcde\"\n" +
            "Output: \"e\"\n\n" +
            "Example 2:\n" +
            "Input: s = \"\", t = \"y\"\n" +
            "Output: \"y\"\n\n" +
            "Constraints:\n" +
            "• 0 <= s.length <= 1000\n" +
            "• t.length == s.length + 1\n" +
            "• s and t consist of lowercase English letters only.\n\n" +
            "Follow up: Can you solve this problem in O(1) space complexity?";

        public override List<TestCase> GetTestCases()
        {
            return new List<TestCase>
            {
                new TestCase("Example 1",
                    new object[] { "abcd", "abcde" },
                    'e'),

                new TestCase("Example 2",
                    new object[] { "", "y" },
                    'y'),

                new TestCase("Added at beginning",
                    new object[] { "abc", "xabc" },
                    'x'),

                new TestCase("Added in middle",
                    new object[] { "ac", "abc" },
                    'b'),

                new TestCase("Single character",
                    new object[] { "a", "aa" },
                    'a'),

                new TestCase("Shuffled order",
                    new object[] { "abc", "bcad" },
                    'd'),

                new TestCase("Complex shuffled",
                    new object[] { "hello", "ohllex" },
                    'x'),

                new TestCase("Repeated characters",
                    new object[] { "aab", "aabb" },
                    'b'),
                    
                new TestCase("Repeated characters", 
                    new object[] { "abcd", "abcde" }, 
                    'e')
            };
        }

        public override object ExecuteSolution(object[] inputs)
        {
            return FindTheDifference((string)inputs[0], (string)inputs[1]);
        }

        // YOUR SOLUTION GOES HERE
        public char FindTheDifference(string s, string t)
        {
            int[] letters = new int[26];

            foreach (char c in s)
            {
                var index = c - 'a';
                letters[index]++;
            }

            foreach (char c in t)
            {
                var index = c- 'a';
                if (letters[index] == 0)
                    return c;
                letters[index]--;
            }

            return ' '; // shouldn't reach here
        }
    }
}